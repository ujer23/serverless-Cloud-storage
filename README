# 🚀 Serverless Cloud Storage

A fully serverless file storage web app built using **AWS Lambda**, **API Gateway**, **S3**, **DynamoDB**, and static frontend files hosted on **S3**.

---

## 🌟 Features

- 🔐 User Sign-Up & Login
- ☁️ Upload files directly to S3 using pre-signed URLs
- 📂 Store file metadata in DynamoDB
- 🗂️ View uploaded files and download them anytime
- ⚡ Serverless backend (no servers needed)
- 🌐 Static frontend (HTML + JS) hosted on S3

---

## 🖼️ Screenshots

### 🔐 Login & Upload Page  
![Login & Upload](https://github.com/ujer23/serverless-Cloud-storage/assets/87264167/69ec69f6-e0cb-42d0-a570-4300a43d51b3)

### 📁 View Uploaded Files  
![View Files](https://github.com/ujer23/serverless-Cloud-storage/assets/87264167/28a51b00-1446-420e-8256-6f4608b3dc8f)

---

## 🧩 AWS Services Used

| Service     | Purpose                                    |
|-------------|--------------------------------------------|
| **S3**      | File storage & static website hosting      |
| **Lambda**  | Backend logic (auth, upload, list, download) |
| **API Gateway** | Expose Lambda as REST API endpoints   |
| **DynamoDB**| Store user data and file metadata          |

---

## 📁 Project Structure

```
📦 serverless-Cloud-storage/
├── index.html          # Home page with login & file upload
├── view.html           # View uploaded files
├── app.js              # All JavaScript logic
├── README.md           # Project documentation
└── lambda/             # Lambda function code (optional)
```

---

## 🚀 How It Works

1. User signs up or logs in using a username/password.
2. User uploads a file → JS requests a **pre-signed URL** from the backend.
3. JS uses that URL to upload the file directly to **S3**.
4. Metadata (filename, size, S3 key, time) is stored in **DynamoDB**.
5. On the “View” page, metadata is fetched and files can be downloaded using **signed URLs**.

---

## 🔧 Deployment Steps

### 1. **S3 Buckets**
- Create:
  - `onecloud-user-files` – store uploaded files.
  - `onecloud-frontend-site` – host the frontend.
- Enable **static website hosting** on `onecloud-frontend-site`.

### 2. **DynamoDB Tables**
- `UserData`  
  - Partition key: `userid`
- `UserFiles`  
  - Partition key: `userid`  
  - Sort key (optional but useful): `fileid`

### 3. **Lambda Functions**
Deploy these Lambda functions (Python 3.12 recommended):
- `signupUser`
- `loginUser`
- `generateUploadURL`
- `uploadFile` (saves metadata)
- `listFiles`
- `downloadFile`

### 4. **API Gateway**
- Create a **REST API** with the `/prod` stage.
- Setup endpoints for each Lambda.
- Enable **CORS** for all methods.

### 5. **Frontend**
- Upload `index.html`, `view.html`, and `app.js` to your S3 static site bucket.
- Set `API_BASE` in `app.js`:
  ```js
  const API_BASE = "https://<your-api-id>.execute-api.<region>.amazonaws.com/prod";
  ```

---

## ✨ Live Demo

> [Add your live site link here if hosted]

---

## 🙌 Author

Made with 💻 by [@ujer23](https://github.com/ujer23)

---

## 📄 License

This project is licensed under the MIT License.
